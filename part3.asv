
Tdata = load('mockdata_v2.mat');

% Find: 
% 1) fraction of population that has been vaccinated 
% 2) fraction of the population experiencing a breakthrough infection as a function of time.

% Tdata1 = Tdata.cumulativeDeaths(1:100);
% I100 = Tdata.InfectedProportion(1:100);
% Tdata1 = {D100, I100};
% D265 = Tdata.cumulativeDeaths(101:end);
% I265 = Tdata.InfectedProportion(101:end);
% Tdata2 = {D265,I265};

Data1.cumulativeDeaths = Tdata.cumulativeDeaths(1:100);
Data1.InfectedProportion = Tdata.InfectedProportion(1:100);
Data2.cumulativeDeaths = Tdata.cumulativeDeaths(101:end);
Data2.InfectedProportion = Tdata.InfectedProportion(101:end);

InputData = Data2;
Inputtime = length(Data2.InfectedProportion);

sirafun= @(x)siroutput2(x,Inputtime,InputData);

%% set up rate and initial condition constraints
% Set A and b to impose a parameter inequality constraint of the form A*x < b
% Note that this is imposed element-wise
% If you don't want such a constraint, keep these matrices empty.
A = [1 1 1 1 1 0 0 0 0 0 0];
b = 1;

%% set up some fixed constraints
% Set Af and bf to impose a parameter constraint of the form Af*x = bf
% Hint: For example, the sum of the initial conditions should be
% constrained
% If you don't want such a constraint, keep these matrices empty.
Af = ([0,0,0,0,0,1,1,1,1,1,1]);
bf = 1;

%% set up upper and lower bound constraints
% Set upper and lower bounds on the parameters
% lb < x < ub
% here, the inequality is imposed element-wise
% If you don't want such a constraint, keep these matrices empty.

ub = [1 1 1 1 1 1 1 1 1 1 1];
lb = [0 0 0 0 0 0 0 0 0 0 0];

% Specify some initial parameters for the optimizer to start from
x0 = [0.0001 0 0.0010 0.00 0 1 0.01 0.1 0 0 0]; 

x = fmincon(sirafun,x0,A,b,Af,bf,lb,ub);
Y_fit = siroutput_full2(x,Inputtime);
simInf = Y_fit(:,2) + Y_fit(:,6);
simDeaths = Y_fit(:,4);
hold on
plot(Tdata.InfectedProportion);
%plot(simInf)
plot(transpose(101:365),simInf);
title('Simulation and data: Infected Proportion')
xlabel('Days')
ylabel('Infected Proportion')
% figure
% plot(Tdata.cumulativeDeaths)
% hold on
% plot(simDeaths)
% %plot(transpose(101:365),simDeaths);
% title('Simulation and data: Cumulative Deaths')
% xlabel('Days')
% ylabel('cumulative deaths')